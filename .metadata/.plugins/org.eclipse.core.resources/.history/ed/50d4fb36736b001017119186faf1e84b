package com.learningmgmt.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.validation.BindingResult;
import org.springframework.validation.ObjectError;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.learningmgmt.JwtToken;
import com.learningmgmt.dto.UserDTO;
import com.learningmgmt.entity.User;
import com.learningmgmt.payload.AuthenticationRequest;
import com.learningmgmt.payload.AuthenticationResponse;
import com.learningmgmt.repository.UserRepository;
import com.learningmgmt.service.UserServices;

import jakarta.validation.Valid;

@RestController
@RequestMapping("/api")
public class UserController {

	@Autowired
	private JwtToken jwtToken;
	
	@Autowired
	private UserServices userServices;
	
	@Autowired
	private UserRepository userRepository;
	
	@Autowired
	private AuthenticationManager authenticationManager;
	
	
	
	@PostMapping("/signup")
	public ResponseEntity<?> signup(@Valid @RequestBody UserDTO userDTO ,BindingResult bindingResult) {
		if(bindingResult.hasErrors()) {
			
		List<String> li = new ArrayList<>();
		
			
			for(ObjectError objerr: bindingResult.getAllErrors()) {
				
				li.add(objerr.getDefaultMessage());
				
				
			}
			return new ResponseEntity<>(li,HttpStatus.BAD_REQUEST);
			
		}else {
			
			//service layer
			User userentity = userServices.signup(userDTO);
			Map<Object, Object> map = new HashMap<>();
			map.put("message", "User Saved Successfully");
			map.put("savedObect", userentity);
			return new ResponseEntity<>(map,HttpStatus.CREATED);
			
		}	
		
	}
	
	@PostMapping("/login")
	public ResponseEntity<AuthenticationResponse> login(@RequestBody AuthenticationRequest authenticationRequest) {
		
		String email = authenticationRequest.getEmail();
		String password = authenticationRequest.getPassword();
		UserDetails userdetails = authenticate(email,password);
		
		//GENERATE TOKEN ON THE BASIS OF USERDETAILS OBJECT
		String token = jwtToken.generateToken(userdetails);//New Era
		AuthenticationResponse authresponse = new AuthenticationResponse();
		authresponse.setToken(token);
		return new ResponseEntity<>(authresponse,HttpStatus.OK);
	}

	
	
	private UserDetails authenticate(String email, String password) {
		UsernamePasswordAuthenticationToken userpass = new UsernamePasswordAuthenticationToken(email, password);
		Authentication authenticate = authenticationManager.authenticate(userpass);
		UserDetails userdetails = (UserDetails) authenticate.getPrincipal();
		return userdetails;
		
	}
	
}
